{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","api/FILTERS.js","components/TodosFilter/TodosFilter.js","api/todos.js","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","changeCompleteness","changeTodoTitle","useState","isEditingNow","setEditing","choosenTodoId","setChoosenTodoId","title","newTitle","setNewTitle","className","cn","completed","editing","id","onDoubleClick","type","checked","onChange","onClick","autoFocus","onBlur","value","event","target","onKeyDown","key","trim","handleKeysPressing","TodoList","todos","map","FILTERS","all","active","TodosFilter","choosenFilter","setChoosenFilter","filters","Object","values","filter","href","selected","todosList","App","setTodos","todoTitle","setTodoTitle","areAllToggled","setTogglingAll","useEffect","filteredTodos","useMemo","onSubmit","preventDefault","prevTodos","Date","placeholder","htmlFor","todoId","newTodos","newTodoList","length","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6577694.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const TodoItem = ({\n  todo,\n  deleteTodo,\n  changeCompleteness,\n  changeTodoTitle,\n}) => {\n  const [isEditingNow, setEditing] = useState(false);\n  const [choosenTodoId, setChoosenTodoId] = useState(null);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const handleKeysPressing = (event) => {\n    switch (event.key) {\n      case 'Escape':\n        setNewTitle(todo.title);\n        setEditing(!isEditingNow);\n        break;\n      case 'Enter':\n        if (newTitle.trim()) {\n          changeTodoTitle(choosenTodoId, newTitle.trim());\n          setEditing(!isEditingNow);\n          break;\n        }\n\n        break;\n      default:\n    }\n  };\n\n  return (\n    <li\n      className={cn({\n        completed: todo.completed,\n        editing: choosenTodoId === todo.id && isEditingNow,\n      })}\n      onDoubleClick={() => {\n        setEditing(true);\n        setChoosenTodoId(todo.id);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => {\n            changeCompleteness(todo.id);\n          }}\n        />\n\n        <label>{todo.title}</label>\n\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n\n      {isEditingNow && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus\n          onBlur={() => setEditing(!isEditingNow)}\n          value={newTitle}\n          onChange={event => setNewTitle(event.target.value)}\n          onKeyDown={event => handleKeysPressing(event)}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  deleteTodo,\n  changeCompleteness,\n  changeTodoTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        deleteTodo={deleteTodo}\n        changeCompleteness={changeCompleteness}\n        changeTodoTitle={changeTodoTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport { FILTERS } from '../../api/FILTERS';\n\nexport const TodosFilter = ({\n  choosenFilter,\n  setChoosenFilter,\n}) => {\n  const filters = Object.values(FILTERS);\n\n  return (\n    <ul className=\"filters\">\n      {filters.map(filter => (\n        <button\n          key={filter}\n          type=\"button\"\n          onClick={() => setChoosenFilter(filter)}\n        >\n          <a\n            href={`#/${filter}`}\n            className={cn({ selected: choosenFilter === filter })}\n          >\n            {filter}\n          </a>\n        </button>\n      ))}\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  choosenFilter: PropTypes.string.isRequired,\n  setChoosenFilter: PropTypes.func.isRequired,\n};\n","export const todosList = [\n  {\n    id: 1,\n    title: 'first',\n    completed: false,\n  },\n  {\n    id: 2,\n    title: 'second',\n    completed: false,\n  },\n  {\n    id: 3,\n    title: 'third',\n    completed: false,\n  },\n];\n\n// export const removeTodo = (todoId) => {\n//   todosList = todosList.filter(todo => todo.id !== todoId);\n// };\n\n// export const addTodo = (title) => {\n//   todosList.push({\n//     id: new Date(),\n//     title,\n//     completed: false,\n//   });\n// };\n","import React, { useState, useEffect, useMemo } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nimport { todosList } from './api/todos';\nimport { FILTERS } from './api/FILTERS';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [areAllToggled, setTogglingAll] = useState(false);\n  const [choosenFilter, setChoosenFilter] = useState(FILTERS.all);\n\n  useEffect(() => {\n    setTodos(todosList);\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    if (!todoTitle) {\n      return;\n    }\n\n    setTodos(prevTodos => ([\n      ...prevTodos,\n      {\n        id: +new Date(),\n        title: todoTitle,\n        completed: false,\n      },\n    ]));\n\n    setTodoTitle('');\n  };\n\n  const deleteTodo = (todoId) => {\n    const newTodos = [...todos].filter(todo => todo.id !== todoId);\n\n    setTodos(newTodos);\n  };\n\n  const changeCompleteness = (todoId) => {\n    const newTodoList = [...todos].map(\n      (todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      },\n    );\n\n    setTodos(newTodoList);\n  };\n\n  const togglingAll = () => {\n    if (!areAllToggled) {\n      return setTodos([...todos].map(\n        todo => ({\n          ...todo,\n          completed: true,\n        }),\n      ));\n    }\n\n    return setTodos([...todos].map(\n      todo => ({\n        ...todo,\n        completed: false,\n      }),\n    ));\n  };\n\n  const clearCompleted = () => {\n    setTodos(\n      [...todos].filter(todo => todo.completed === false),\n    );\n    setTogglingAll(false);\n  };\n\n  const filteredTodos = useMemo(() => {\n    switch (choosenFilter) {\n      case FILTERS.active:\n        return todos.filter(todo => !todo.completed);\n      case FILTERS.completed:\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }, [todos, choosenFilter]);\n\n  const changeTodoTitle = (todoId, newTitle) => setTodos([...todos].map(\n    (todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    },\n  ));\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form\n          onSubmit={addTodo}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todoTitle}\n            onChange={event => setTodoTitle(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={areAllToggled}\n          onChange={() => {\n            setTogglingAll(!areAllToggled);\n            togglingAll();\n          }}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={filteredTodos}\n          deleteTodo={deleteTodo}\n          changeCompleteness={changeCompleteness}\n          changeTodoTitle={changeTodoTitle}\n        />\n      </section>\n\n      {todos.length === 0\n        ? null\n        : (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {todos.filter(todo => !todo.completed).length}\n              {todos.filter(todo => !todo.completed).length === 1\n                ? ' item left'\n                : ' items left'}\n            </span>\n\n            <TodosFilter\n              choosenFilter={choosenFilter}\n              setChoosenFilter={setChoosenFilter}\n            />\n\n            {todos.some(todo => todo.completed === true) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}