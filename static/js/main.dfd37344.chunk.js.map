{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","api/FILTERS.js","components/TodosFilter/TodosFilter.js","api/todos.js","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","changeCompleteness","className","cn","completed","type","checked","onChange","id","title","onClick","TodoList","todos","map","key","FILTERS","all","active","TodosFilter","choosenFilter","setChoosenFilter","filters","Object","values","filter","href","selected","todosList","App","useState","setTodos","todoTitle","setTodoTitle","areAllToggled","setTogglingAll","useEffect","filteredTodos","useMemo","onSubmit","event","preventDefault","prevTodos","Date","placeholder","value","target","htmlFor","todoId","newTodos","newTodoList","length","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfd37344.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const TodoItem = ({\n  todo,\n  deleteTodo,\n  changeCompleteness,\n  // setChoosenTodoId,\n}) => (\n  <li className={cn({ completed: todo.completed })}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        checked={todo.completed}\n        onChange={() => {\n          changeCompleteness(todo.id);\n          // setChoosenTodoId(todo.id);\n        }}\n      />\n\n      <label>{todo.title}</label>\n\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTodo(todo.id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n\n  // <li>\n  //   <div className=\"view\">\n  //     <input type=\"checkbox\" className=\"toggle\" />\n  //     <label>asdfghj</label>\n  //     <button type=\"button\" className=\"destroy\" />\n  //   </div>\n  //   <input type=\"text\" className=\"edit\" />\n  // </li>\n\n  // <li className=\"completed\">\n  //   <div className=\"view\">\n  //     <input type=\"checkbox\" className=\"toggle\" />\n  //     <label>qwertyuio</label>\n  //     <button type=\"button\" className=\"destroy\" />\n  //   </div>\n  //   <input type=\"text\" className=\"edit\" />\n  // </li>\n\n  // <li className=\"editing\">\n  //   <div className=\"view\">\n  //     <input type=\"checkbox\" className=\"toggle\" />\n  //     <label>zxcvbnm</label>\n  //     <button type=\"button\" className=\"destroy\" />\n  //   </div>\n  //   <input type=\"text\" className=\"edit\" />\n  // </li>\n\n  // <li>\n  //   <div className=\"view\">\n  //     <input type=\"checkbox\" className=\"toggle\" />\n  //     <label>1234567890</label>\n  //     <button type=\"button\" className=\"destroy\" />\n  //   </div>\n  //   <input type=\"text\" className=\"edit\" />\n  // </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  deleteTodo,\n  changeCompleteness,\n  // setChoosenTodoId,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        deleteTodo={deleteTodo}\n        changeCompleteness={changeCompleteness}\n        // setChoosenTodoId={setChoosenTodoId}\n      />\n    ))}\n\n    {/* <li>\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" />\n        <label>asdfghj</label>\n        <button type=\"button\" className=\"destroy\" />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n\n    <li className=\"completed\">\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" />\n        <label>qwertyuio</label>\n        <button type=\"button\" className=\"destroy\" />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n\n    <li className=\"editing\">\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" />\n        <label>zxcvbnm</label>\n        <button type=\"button\" className=\"destroy\" />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n\n    <li>\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" />\n        <label>1234567890</label>\n        <button type=\"button\" className=\"destroy\" />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li> */}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeCompleteness: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport { FILTERS } from '../../api/FILTERS';\n\nexport const TodosFilter = ({\n  choosenFilter,\n  setChoosenFilter,\n}) => {\n  const filters = Object.values(FILTERS);\n\n  return (\n    <ul className=\"filters\">\n      {filters.map(filter => (\n        <button\n          key={filter}\n          type=\"button\"\n          onClick={() => setChoosenFilter(filter)}\n        >\n          <a\n            href={`#/${filter}`}\n            className={cn({ selected: choosenFilter === filter })}\n          >\n            {filter}\n          </a>\n        </button>\n      ))}\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  choosenFilter: PropTypes.string.isRequired,\n  setChoosenFilter: PropTypes.func.isRequired,\n};\n","export const todosList = [\n  {\n    id: 1,\n    title: 'first',\n    completed: false,\n  },\n  {\n    id: 2,\n    title: 'second',\n    completed: false,\n  },\n  {\n    id: 3,\n    title: 'third',\n    completed: false,\n  },\n];\n\n// export const removeTodo = (todoId) => {\n//   todosList = todosList.filter(todo => todo.id !== todoId);\n// };\n\n// export const addTodo = (title) => {\n//   todosList.push({\n//     id: new Date(),\n//     title,\n//     completed: false,\n//   });\n// };\n","import React, { useState, useEffect, useMemo } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nimport { todosList } from './api/todos';\nimport { FILTERS } from './api/FILTERS';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [areAllToggled, setTogglingAll] = useState(false);\n  const [choosenFilter, setChoosenFilter] = useState(FILTERS.all);\n\n  useEffect(() => {\n    setTodos(todosList);\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    if (!todoTitle) {\n      return;\n    }\n\n    setTodos(prevTodos => ([\n      ...prevTodos,\n      {\n        id: +new Date(),\n        title: todoTitle,\n        completed: false,\n      },\n    ]));\n\n    setTodoTitle('');\n  };\n\n  const deleteTodo = (todoId) => {\n    const newTodos = [...todos].filter(todo => todo.id !== todoId);\n\n    setTodos(newTodos);\n  };\n\n  const changeCompleteness = (todoId) => {\n    const newTodoList = [...todos].map(\n      (todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      },\n    );\n\n    setTodos(newTodoList);\n  };\n\n  const togglingAll = () => {\n    if (!areAllToggled) {\n      return setTodos([...todos].map(\n        todo => ({\n          ...todo,\n          completed: true,\n        }),\n      ));\n    }\n\n    return setTodos([...todos].map(\n      todo => ({\n        ...todo,\n        completed: false,\n      }),\n    ));\n  };\n\n  const clearCompleted = () => {\n    setTodos(\n      [...todos].filter(todo => todo.completed === false),\n    );\n    setTogglingAll(false);\n  };\n\n  const filteredTodos = useMemo(() => {\n    switch (choosenFilter) {\n      case FILTERS.active:\n        return todos.filter(todo => !todo.completed);\n      case FILTERS.completed:\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }, [todos, choosenFilter]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form\n          onSubmit={addTodo}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todoTitle}\n            onChange={event => setTodoTitle(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={areAllToggled}\n          onChange={() => {\n            setTogglingAll(!areAllToggled);\n            togglingAll();\n          }}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={filteredTodos}\n          deleteTodo={deleteTodo}\n          changeCompleteness={changeCompleteness}\n        />\n      </section>\n\n      {todos.length === 0\n        ? null\n        : (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {todos.filter(todo => !todo.completed).length}\n              {todos.filter(todo => !todo.completed).length === 1\n                ? ' item left'\n                : ' items left'}\n            </span>\n\n            <TodosFilter\n              choosenFilter={choosenFilter}\n              setChoosenFilter={setChoosenFilter}\n            />\n\n            {todos.some(todo => todo.completed === true) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}